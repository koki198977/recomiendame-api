generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  password       String
  fullName       String
  birthDate      DateTime?
  gender         String?
  country        String?
  language       String?
  favoriteGenres String[]
  favoriteMedia  String?
  emailVerified  Boolean   @default(false)
  createdAt      DateTime  @default(now())

  seenItems              SeenItem[]
  ratings                Rating[]
  favorites              Favorite[]
  recommendations        Recommendation[]
  emailVerificationToken EmailVerificationToken?
  passwordResetTokens    PasswordResetToken[]
  ActivityLog            ActivityLog[]
  wishListItems          WishListItem[]
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String   @unique
  token     String   @unique
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tmdb {
  id          Int       @id // tmdbId como clave primaria
  title       String
  overview    String?
  posterUrl   String?
  releaseDate DateTime?
  genreIds    Int[]
  popularity  Float?
  voteAverage Float?
  mediaType   String // 'movie' | 'tv'
  trailerUrl  String?
  platforms   Json? // Ej: ['Netflix', 'Disney+', 'HBO Max']
  createdAt   DateTime  @default(now())

  seenItems       SeenItem[]
  ratings         Rating[]
  favorites       Favorite[]
  recommendations Recommendation[]
  activityLogs    ActivityLog[]
  wishListItems   WishListItem[]
}

model SeenItem {
  id        String   @id @default(cuid())
  userId    String
  tmdbId    Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tmdb Tmdb @relation(fields: [tmdbId], references: [id])

  @@unique([userId, tmdbId])
}

model Rating {
  id        String   @id @default(cuid())
  userId    String
  tmdbId    Int
  rating    Float
  comment   String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tmdb Tmdb @relation(fields: [tmdbId], references: [id])

  @@unique([userId, tmdbId])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  tmdbId    Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tmdb Tmdb @relation(fields: [tmdbId], references: [id])

  @@unique([userId, tmdbId])
}

model Recommendation {
  id        String   @id @default(cuid())
  userId    String
  tmdbId    Int
  reason    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tmdb Tmdb @relation(fields: [tmdbId], references: [id])

  @@unique([userId, tmdbId])
}

model ActivityLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  tmdbId    Int
  details   String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tmdb Tmdb @relation(fields: [tmdbId], references: [id])
}

model WishListItem {
  id        String   @id @default(cuid())
  userId    String
  tmdbId    Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tmdb Tmdb @relation(fields: [tmdbId], references: [id])

  @@unique([userId, tmdbId])
}
